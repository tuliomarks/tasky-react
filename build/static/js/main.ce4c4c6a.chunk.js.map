{"version":3,"sources":["Components/Tasks/Task.tsx","Data/TasksService.tsx","Data/TasksReducer.tsx","Data/AppDataProvider.tsx","Components/Shared/Button.tsx","Components/Shared/Input.tsx","Components/Shared/TextArea.tsx","Components/Shared/Dialog.tsx","Components/Tasks/TaskList.tsx","Components/WeekRuler/WeekButton.tsx","Components/WeekRuler/WeekRuler.tsx","Components/Tasks/TaskRulerList.tsx","Utils/Utils.tsx","Components/Tasks/TaskForm.tsx","Components/Layout/TaskDashboard.tsx","Components/Layout/Layout.tsx","Components/Layout/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Task","props","className","title","dangerouslySetInnerHTML","__html","description","replaceAll","moment","dateCreated","format","finishedAt","children","localStorageKey","TasksService","getAll","list","localStorage","getItem","JSON","parse","updateAll","tasks","setItem","stringify","TaskTypes","TasksReducer","state","action","type","Add","newList","payload","task","Modify","index","findIndex","id","Remove","filter","initialState","AppContext","createContext","dispatch","mainReducer","AppDataProvider","useReducer","Provider","value","Button","color","onClick","Input","placeholder","onChange","hint","TextArea","Dialog","useState","isVisible","setIsVisible","useEffect","setTimeout","handleKeyDown","event","key","onClose","document","addEventListener","removeEventListener","TaskList","useContext","isFormVisible","setIsFormVisible","onSubmit","newTask","length","map","elem","startedAt","Date","handleTaskStart","handleTaskFinish","handleTaskDelete","WeekButton","isSelected","isSame","date","onDayClick","startOf","endOf","WeekRuler","referenceDay","setReferenceDay","selectedDay","weeks","baseDate","maxWeeksToShow","weeksToShow","startDate","add","days","i","push","toDate","getRulerWeeks","handleDayClick","day","onDayChanged","newDate","getUTCDate","TaskRulerList","setSelectedDay","tasksToShow","isSameOrBefore","isSameOrAfter","sort","a","b","isBefore","generateId","result","characters","charactersLength","charAt","Math","floor","random","TaskForm","form","setForm","handleChange","field","preventDefault","target","e","TaskDashboard","Layout","Header","href","rel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ce4c4c6a.chunk.js","sourcesContent":["import { CalendarIcon, CheckIcon } from \"@heroicons/react/outline\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\n\r\nexport interface TaskProps {\r\n\ttitle: string;\r\n\tdescription: string;\r\n\tfinishedAt?: Date;\r\n\tdateCreated?: Date;\r\n\tchildren?: React.ReactNode;\r\n}\r\n\r\nconst Task: React.FC<TaskProps> = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"flex flex-row shadow p-4 rounded-lg mb-2 bg-white\">\r\n\t\t\t<div className=\"flex-grow mr-2\">\r\n\t\t\t\t<span>{props.title}</span>\r\n\t\t\t\t<p\r\n\t\t\t\t\tclassName=\"pl-4 text-xs\"\r\n\t\t\t\t\tdangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t__html: props.description.replaceAll(\"\\n\", \"<br>\"),\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"flex flex-row\">\r\n\t\t\t\t\t<span className=\"text-sm text-gray-400 mr-2\">\r\n\t\t\t\t\t\t<CalendarIcon className=\"h-4 w-4 inline mr-2\"></CalendarIcon>\r\n\t\t\t\t\t\t{moment(props.dateCreated).format(\"DD/MM/YYYY\")}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t{props.finishedAt && (\r\n\t\t\t\t\t\t<span className=\"text-sm text-green-400\">\r\n\t\t\t\t\t\t\t<CheckIcon className=\"h-4 w-4 inline mr-2\"></CheckIcon>\r\n\t\t\t\t\t\t\t{moment(props.finishedAt).format(\"DD/MM/YYYY\")}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"flex flex-none flex-row items-center\">\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Task;\r\n","interface TaskModel {\r\n\tid: string;\r\n\ttitle: string;\r\n\tdescription: string;\r\n\tdateCreated: Date;\r\n\tfinishedAt?: Date;\r\n\tstartedAt?: Date;\r\n}\r\n\r\nconst localStorageKey = \"Tasky.tasks\";\r\n\r\nclass TasksService {\r\n\tstatic getAll = (): TaskModel[] => {\r\n\t\tconst list = localStorage.getItem(localStorageKey);\r\n\t\treturn list ? JSON.parse(list) : [];\r\n\t};\r\n\r\n\tstatic updateAll = (tasks: TaskModel[]): void => {\r\n\t\tlocalStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\t};\r\n}\r\n\r\nexport default TasksService;\r\nexport type { TaskModel };\r\n","import { TaskModel, TasksService } from \".\";\r\n\r\ntype ActionMap<M extends { [index: string]: any }> = {\r\n\t[Key in keyof M]: M[Key] extends undefined\r\n\t\t? {\r\n\t\t\t\ttype: Key;\r\n\t\t  }\r\n\t\t: {\r\n\t\t\t\ttype: Key;\r\n\t\t\t\tpayload: M[Key];\r\n\t\t  };\r\n};\r\n\r\nexport enum TaskTypes {\r\n\tAdd = \"ADD_TASK\",\r\n\tModify = \"MODIFY_TASK\",\r\n\tRemove = \"REMOVE_TASK\",\r\n}\r\n\r\ntype TaskPayload = {\r\n\t[TaskTypes.Add]: {\r\n\t\ttask: TaskModel;\r\n\t};\r\n\t[TaskTypes.Modify]: {\r\n\t\ttask: TaskModel;\r\n\t};\r\n\t[TaskTypes.Remove]: {\r\n\t\ttask: TaskModel;\r\n\t};\r\n};\r\n\r\nexport type TaskActions = ActionMap<TaskPayload>[keyof ActionMap<TaskPayload>];\r\n\r\nexport const TasksReducer = (state: TaskModel[], action: TaskActions) => {\r\n\tswitch (action.type) {\r\n\t\tcase TaskTypes.Add: {\r\n\t\t\tconst newList = [...state, action.payload.task];\r\n\t\t\tTasksService.updateAll(newList);\r\n\t\t\treturn newList;\r\n\t\t}\r\n\t\tcase TaskTypes.Modify: {\r\n\t\t\tconst index = state.findIndex((state) => state.id === action.payload.task.id);\r\n\t\t\tstate[index] = { ...action.payload.task };\r\n\r\n\t\t\tTasksService.updateAll(state);\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tcase TaskTypes.Remove: {\r\n\t\t\tconst newList = state.filter(\r\n\t\t\t\t(state) => state !== action.payload.task\r\n\t\t\t);\r\n\t\t\tTasksService.updateAll(newList);\r\n\t\t\treturn newList;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport { TaskActions, TasksReducer } from \"./TasksReducer\";\r\nimport { TaskModel } from \".\";\r\nimport TasksService from \"./TasksService\";\r\n\r\ninterface AppInitialState {\r\n\ttasks: TaskModel[];\r\n}\r\n\r\nconst initialState = { tasks: TasksService.getAll() };\r\n\r\nexport const AppContext = createContext<{\r\n\tstate: AppInitialState;\r\n\tdispatch: React.Dispatch<any>;\r\n}>({ state: initialState, dispatch: () => null });\r\n\r\nconst mainReducer = ({ tasks }: AppInitialState, action: TaskActions) => ({\r\n    tasks: TasksReducer(tasks, action),\r\n});\r\n\r\nconst AppDataProvider: React.FC = ({ children }) => {\r\n\tconst [state, dispatch] = useReducer(mainReducer, initialState);\r\n\r\n\treturn (\r\n\t\t<AppContext.Provider value={{ state, dispatch }}>\r\n\t\t\t{children}\r\n\t\t</AppContext.Provider>\r\n\t);\r\n};\r\n\r\nexport default AppDataProvider;\r\n","import React from \"react\";\r\n\r\nexport interface ButtonProps {\r\n\tclassName?: string;\r\n\ttype?: \"button\" | \"submit\";\r\n\tcolor?: \"default\" | \"primary\" | \"secondary\";\r\n\tchildren?: React.ReactNode;\r\n\tonClick?: () => void;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = (props) => {\r\n\tconst color = props.color || \"default\";\r\n\tconst type = props.type || \"button\";\r\n\r\n\tconst getColorClass = () => {\r\n\t\tif (color === \"default\") {\r\n\t\t\treturn \"bg-white hover:bg-gray-100\";\r\n\t\t}\r\n\t\tif (color === \"primary\") {\r\n\t\t\treturn \"bg-primary-500 hover:bg-primary-600 text-white\";\r\n\t\t}\r\n\t\tif (color === \"secondary\") {\r\n\t\t\treturn \"bg-secondary hover:bg-secondary-600 text-white\";\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<button\r\n\t\t\ttype={type}\r\n\t\t\tclassName={\r\n\t\t\t\t\"shadow hover:shadow-lg p-4 rounded-lg ease-linear transition-all duration-150 font-bold \" +\r\n\t\t\t\tgetColorClass() +\r\n\t\t\t\t\" \" +\r\n\t\t\t\tprops.className\r\n\t\t\t}\r\n\t\t\tonClick={props.onClick}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { ChangeEventHandler } from \"react\";\r\n\r\nexport interface InputProps {\r\n\tclassName?: string;\r\n    placeholder?: string;\r\n\thint?: string;\r\n\tvalue?: string;\r\n\tonChange?: ChangeEventHandler<HTMLInputElement>\r\n}\r\n\r\nconst Input: React.FC<InputProps> = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className={\"mb-3 pt-0\" + props.className}>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={props.value}\r\n\t\t\t\tplaceholder={props.placeholder}\r\n\t\t\t\tclassName=\"px-3 py-3 placeholder-gray-300 text-gray-600 relative bg-white bg-white rounded text-sm border-0 shadow outline-none focus:outline-none focus:ring w-full\"\r\n                onChange={props.onChange}\r\n\t\t\t/>\r\n\t\t\t{props.hint && (<p className=\"text-gray-600 text-xs italic\">{props.hint}</p>)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport { ChangeEventHandler } from \"react\";\r\n\r\nexport interface TextAreaProps {\r\n\tclassName?: string;\r\n\tplaceholder?: string;\r\n\thint?: string;\r\n\tvalue?: string;\r\n\tonChange?: ChangeEventHandler<HTMLTextAreaElement>;\r\n}\r\n\r\nconst TextArea: React.FC<TextAreaProps> = (props) => {\r\n\treturn (\r\n\t\t<div className={\"mb-3 pt-0\" + props.className}>\r\n\t\t\t<textarea\r\n\t\t\t\tplaceholder={props.placeholder}\r\n\t\t\t\tvalue={props.value}\r\n\t\t\t\tclassName=\"px-3 py-3 placeholder-gray-300 text-gray-600 relative bg-white bg-white rounded text-sm border-0 shadow outline-none focus:outline-none focus:ring w-full\"\r\n\t\t\t\tonChange={props.onChange}\r\n\t\t\t/>\r\n\t\t\t{props.hint && (\r\n\t\t\t\t<p className=\"text-gray-600 text-xs italic\">{props.hint}</p>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TextArea;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { XIcon } from \"@heroicons/react/outline\";\r\n\r\nexport interface DialogProps {\r\n\ttitle: string;\r\n\tisVisible: boolean;\r\n\tclassName?: string;\r\n\tchildren?: React.ReactNode;\r\n\tonConfirm?: () => void;\r\n\tonClose?: () => void;\r\n}\r\n\r\nconst Dialog: React.FC<DialogProps> = (props) => {\r\n \r\n\tconst [ isVisible, setIsVisible ] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\t// this is just to execute correctly the CSS transition\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetIsVisible(props.isVisible);\r\n\t\t}, 100);\r\n\t\t\r\n\t\tconst handleKeyDown = (event: KeyboardEvent) => {\r\n\t\t\tif(event.key === \"Escape\") {\r\n\t\t\t\tprops.onClose && props.onClose()\r\n\t\t\t}\t\t\r\n\t\t}\r\n\r\n\t\tdocument.addEventListener(\"keydown\", handleKeyDown, false);\r\n\t\t\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener(\"keydown\", handleKeyDown, false);\r\n\t\t}\r\n\t}, [props])\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={\r\n\t\t\t\t\"modal fixed w-full h-full top-0 left-0 flex items-center justify-center ease-linear transition-all duration-200 \" +\r\n\t\t\t\t(!isVisible ? \"opacity-0 pointer-events-none\" : null)\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t<div className=\"modal-overlay absolute w-full h-full bg-gray-900 opacity-50\"></div>\r\n\r\n\t\t\t<div className=\"modal-container bg-white w-11/12 md:max-w-md mx-auto rounded shadow-lg z-50 overflow-y-auto\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"modal-close absolute top-0 right-0 cursor-pointer flex flex-col items-center mt-4 mr-4 text-white text-sm z-50\"\r\n\t\t\t\t\tonClick={props.onClose}\r\n\t\t\t\t>\r\n\t\t\t\t\t<XIcon className=\"h-5 w-5\" />\r\n\t\t\t\t\t<span className=\"text-sm\">(Esc)</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"modal-content py-4 text-left px-6\">\r\n\t\t\t\t\t<div className=\"flex justify-between items-center pb-3\">\r\n\t\t\t\t\t\t<p className=\"text-lg font-bold\">{props.title}</p>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"modal-close cursor-pointer z-50\"\r\n\t\t\t\t\t\t\tonClick={props.onClose}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<XIcon className=\"h-5 w-5 text-gray-400\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{props.children}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Dialog;\r\n","import {\r\n\tClipboardCheckIcon,\r\n\tClipboardCopyIcon,\r\n\tDocumentAddIcon,\r\n\tTrashIcon,\r\n} from \"@heroicons/react/outline\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { TaskForm } from \".\";\r\nimport { AppContext, TaskModel, TaskTypes } from \"../../Data\";\r\nimport { Button, Dialog } from \"../Shared\";\r\nimport Task, { TaskProps } from \"./Task\";\r\n\r\nexport interface TaskListProps {\r\n\ttitle: string;\r\n\ttasks: TaskProps[];\r\n\tclassName?: string;\r\n\ttype?: \"todo\" | \"doing\";\r\n\tonDelete?(value: TaskProps): void;\r\n}\r\n\r\nconst TaskList: React.FC<TaskListProps> = (props) => {\r\n\tconst { dispatch } = useContext(AppContext);\r\n\r\n\tconst [isFormVisible, setIsFormVisible] = useState<boolean>(false);\r\n\r\n\tconst handleTaskDelete = (elem: TaskProps): void => {\r\n\t\tdispatch({ type: TaskTypes.Remove, payload: { task: elem } });\r\n\t};\r\n\r\n\tconst handleTaskFinish = (elem: TaskProps): void => {\r\n\t\tdispatch({\r\n\t\t\ttype: TaskTypes.Modify,\r\n\t\t\tpayload: { task: { ...elem, finishedAt: new Date() } },\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleTaskStart = (elem: TaskProps): void => {\r\n\t\tdispatch({\r\n\t\t\ttype: TaskTypes.Modify,\r\n\t\t\tpayload: { task: { ...elem, startedAt: new Date() } },\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleSubmit = (newTask: TaskModel) => {\r\n\t\tdispatch({ type: TaskTypes.Add, payload: { task: newTask } });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={\"flex flex-col p-2 \" + props.className}>\r\n\t\t\t<div className=\"flex flex-row my-2 items-center\">\r\n\t\t\t\t<h3 className=\"font-bold flex-grow\">{props.title}</h3>\r\n\t\t\t\t{props.type === \"todo\" && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName=\"flex-none\"\r\n\t\t\t\t\t\t\tonClick={() => setIsFormVisible(true)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<DocumentAddIcon className=\"h-5 w-5 text-gray-400\"></DocumentAddIcon>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t{isFormVisible && (\r\n\t\t\t\t\t\t\t<Dialog\r\n\t\t\t\t\t\t\t\ttitle=\"New Task\"\r\n\t\t\t\t\t\t\t\tisVisible={isFormVisible}\r\n\t\t\t\t\t\t\t\tonClose={() => setIsFormVisible(false)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<TaskForm\r\n\t\t\t\t\t\t\t\t\tonSubmit={handleSubmit}\r\n\t\t\t\t\t\t\t\t\tonClose={() => setIsFormVisible(false)}\r\n\t\t\t\t\t\t\t\t></TaskForm>\r\n\t\t\t\t\t\t\t</Dialog>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t{props.tasks.length !== 0 ? (\r\n\t\t\t\tprops.tasks.map((elem: TaskProps, index: number) => (\r\n\t\t\t\t\t<Task\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\ttitle={elem.title}\r\n\t\t\t\t\t\tdescription={elem.description}\r\n\t\t\t\t\t\tfinishedAt={elem.finishedAt}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{props.type === \"todo\" && (\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tclassName=\"mr-2\"\r\n\t\t\t\t\t\t\t\tonClick={() => handleTaskStart(elem)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<ClipboardCopyIcon className=\"h-5 w-5 text-primary-500\" />\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{!elem.finishedAt && props.type === \"doing\" && (\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tclassName=\"mr-2\"\r\n\t\t\t\t\t\t\t\tonClick={() => handleTaskFinish(elem)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<ClipboardCheckIcon className=\"h-5 w-5 text-green-400\" />\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<Button onClick={() => handleTaskDelete(elem)}>\r\n\t\t\t\t\t\t\t<TrashIcon className=\"h-5 w-5 text-red-400\" />\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Task>\r\n\t\t\t\t))\r\n\t\t\t) : (\r\n\t\t\t\t<div>No tasks found!</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\ninterface WeekButtonProps {\r\n\tdate: Date;\r\n\tisSelected: boolean;\r\n\tonDayClick?: any;\r\n}\r\n\r\nconst WeekButton: React.FC<WeekButtonProps> = (props) => {\r\n\tconst dayClass = () => {\r\n\t\tif (props.isSelected) return \"bg-primary-500 bg-opacity-25\";\r\n\r\n\t\tif (moment().isSame(props.date, \"week\")) return \"bg-secondary-300 bg-opacity-25\";\r\n\r\n\t\treturn \"bg-white hover:bg-secondary-200\";\r\n\t};\r\n\r\n\treturn (\r\n\t\t<li\r\n\t\t\tclassName={\r\n\t\t\t\t\"flex flex-auto p-4 border-r border-gray-500 border-opacity-25 hover:bg-opacity-50 ease-linear transition-all duration-150 \" +\r\n\t\t\t\tdayClass()\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"flex flex-col flex-auto items-center\"\r\n\t\t\t\tonClick={() => props.onDayClick(props.date)}\r\n\t\t\t>\r\n\t\t\t\t<span className=\"text-sm\">{moment(props.date).startOf(\"week\").format(\"DD\")}-{moment(props.date).endOf(\"week\").format(\"DD\")}</span>\r\n\t\t\t\t<span className=\"text-sm text-gray-500\">\r\n\t\t\t\t\t{moment(props.date).format(\"MMM\")}\r\n\t\t\t\t</span>\r\n\t\t\t</button>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default WeekButton;\r\n","import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport WeekButton from \"./WeekButton\";\r\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@heroicons/react/outline\";\r\n\r\ninterface WeekRulerProps {\r\n\tweeksToShow?: number;\r\n\treferenceDay?: Date;\r\n\tselectedDay?: Date;\r\n\tonDayChanged(day: Date): void;\r\n}\r\n\r\nconst WeekRuler: React.FC<WeekRulerProps> = (props) => {\r\n\t\r\n\tconst [referenceDay, setReferenceDay] = useState<Date>(props.referenceDay || new Date());\r\n\tconst selectedDay = props.selectedDay || referenceDay;\r\n\r\n\tconst getRulerWeeks = (baseDate: Date): Date[] => {\r\n\t\tconst maxWeeksToShow = props.weeksToShow || 5;\r\n\t\tconst startDate = moment(baseDate).startOf('isoWeek').add(-(maxWeeksToShow / 2) , \"w\");\r\n\t\tconst days: Date[] = [];\r\n\r\n\t\tfor (let i = 0; i < maxWeeksToShow; i++) {\r\n\t\t\tdays.push(startDate.add(1, \"w\").toDate());\r\n\t\t}\r\n\r\n\t\treturn days;\r\n\t};\r\n\r\n\tconst weeks = getRulerWeeks(referenceDay);\r\n\r\n\tconst handleDayClick = (day: Date) => {\r\n\t\tprops.onDayChanged(day);\r\n\t};\r\n\tconst handlePrevRuler = () => {\r\n\t\tconst newDate = moment(referenceDay).add(-3, \"w\").toDate();\r\n\t\tsetReferenceDay(newDate);\r\n\t};\r\n\tconst handleNextRuler = () => {\r\n\t\tconst newDate = moment(referenceDay).add(3, \"w\").toDate();\r\n\t\tsetReferenceDay(newDate);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ul className=\"flex flex-row p-4 my-4 rounded-lg shadow bg-white self-stretch\">\r\n\t\t\t<li className=\"p-4 border-r border-gray-500 border-opacity-25 self-center\">\r\n\t\t\t\t<button onClick={handlePrevRuler}>\r\n\t\t\t\t\t<ChevronLeftIcon className=\"h-5 w-5 text-secondary-700\"></ChevronLeftIcon>\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t\t{weeks.length !== 0 ? (\r\n\t\t\t\tweeks.map((day) => (\r\n\t\t\t\t\t<WeekButton\r\n\t\t\t\t\t\tkey={day.getUTCDate()}\r\n\t\t\t\t\t\tdate={day}\r\n\t\t\t\t\t\tisSelected={moment(day).isSame(selectedDay, \"w\")}\r\n\t\t\t\t\t\tonDayClick={handleDayClick}\r\n\t\t\t\t\t></WeekButton>\r\n\t\t\t\t))\r\n\t\t\t) : (\r\n\t\t\t\t<p>It's the end predit by mayans</p>\r\n\t\t\t)}\r\n\t\t\t<li className=\"p-4 self-center\">\r\n\t\t\t\t<button onClick={handleNextRuler}>\r\n\t\t\t\t\t<ChevronRightIcon className=\"h-5 w-5 text-secondary-700\"></ChevronRightIcon>\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default WeekRuler;\r\n","import { HomeIcon, TrashIcon } from \"@heroicons/react/outline\";\r\nimport moment from \"moment\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { AppContext, TaskTypes } from \"../../Data\";\r\nimport { Button } from \"../Shared\";\r\nimport { WeekRuler } from \"../WeekRuler\";\r\nimport Task, { TaskProps } from \"./Task\";\r\n\r\nexport interface TaskRulerListProps {\r\n\ttitle: string;\r\n\ttasks: TaskProps[];\r\n\tclassName?: string;\r\n}\r\n\r\nconst TaskRulerList: React.FC<TaskRulerListProps> = (props) => {\r\n\tconst { dispatch } = useContext(AppContext);\r\n\r\n\tconst [referenceDay, setReferenceDay] = useState<Date>(new Date());\r\n\tconst [selectedDay, setSelectedDay] = useState<Date>(new Date());\r\n\r\n\tconst handleDayChanged = (day: Date) => {\r\n\t\tsetSelectedDay(day);\r\n\t};\r\n\r\n\tconst handleResetSelectedDay = () => {\r\n\t\tsetSelectedDay(new Date());\r\n\t\tsetReferenceDay(new Date());\r\n\t};\r\n\r\n\tconst getDoneByDate = (date: Date): TaskProps[] => {\r\n\t\treturn props.tasks.filter(\r\n\t\t\t(task) =>\r\n\t\t\t\ttask.finishedAt && moment(date).startOf(\"week\").isSameOrBefore(task.finishedAt, \"day\")\r\n\t\t\t\t\t\t\t\t&& moment(date).endOf(\"week\").isSameOrAfter(task.finishedAt, \"day\")\r\n\t\t).sort((a,b) => moment(a.finishedAt).isBefore(b.finishedAt) ? 1 : -1);\r\n\t};\r\n\r\n\tconst tasksToShow = getDoneByDate(selectedDay);\r\n\r\n\tconst handleTaskDelete = (elem: TaskProps): void => {\r\n\t\tdispatch({ type: TaskTypes.Remove, payload: { task: elem } });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={\"flex flex-col p-2 \" + props.className}>\r\n\t\t\t<div className=\"flex flex-row my-2 items-center\">\r\n\t\t\t\t<h3 className=\"font-bold flex-grow\">{props.title}</h3>\r\n\t\t\t\t<Button className=\"flex-none\" onClick={handleResetSelectedDay}>\r\n\t\t\t\t\t<HomeIcon className=\"h-5 w-5 text-gray-400\"></HomeIcon>\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t\t<WeekRuler\r\n\t\t\t\tonDayChanged={handleDayChanged}\r\n\t\t\t\tweeksToShow={5}\r\n\t\t\t\tselectedDay={selectedDay}\r\n\t\t\t\treferenceDay={referenceDay}\r\n\t\t\t></WeekRuler>\r\n\t\t\t{tasksToShow.length !== 0 ? (\r\n\t\t\t\ttasksToShow.map((elem: TaskProps, index: number) => (\r\n\t\t\t\t\t<Task\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\ttitle={elem.title}\r\n\t\t\t\t\t\tdescription={elem.description}\r\n\t\t\t\t\t\tfinishedAt={elem.finishedAt}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Button onClick={() => handleTaskDelete(elem)}>\r\n\t\t\t\t\t\t\t<TrashIcon className=\"h-5 w-5 text-red-400\" />\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Task>\r\n\t\t\t\t))\r\n\t\t\t) : (\r\n\t\t\t\t<div>No tasks found!</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TaskRulerList;\r\n","const generateId = (length: number): string => {\r\n\tvar result = \"\";\r\n\tvar characters =\r\n\t\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\tvar charactersLength = characters.length;\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tresult += characters.charAt(\r\n\t\t\tMath.floor(Math.random() * charactersLength)\r\n\t\t);\r\n\t}\r\n\treturn result;\r\n};\r\n\r\nexport { generateId }","import React, { ChangeEvent, FormEvent, useState } from \"react\";\r\nimport { TaskModel } from \"../../Data\";\r\nimport { Button, Input, TextArea } from \"../Shared\";\r\nimport { generateId } from \"../../Utils/Utils\";\r\n\r\nexport interface TaskFormProps {\r\n\tonSubmit?(task: TaskModel): void;\r\n\tonClose?(): void;\r\n}\r\n\r\nconst TaskForm: React.FC<TaskFormProps> = (props) => {\r\n\tconst [form, setForm] = useState({ title: \"\", description: \"\" });\r\n\r\n\tconst handleChange = (field: string, event: ChangeEvent<any>) => {\r\n\t\tevent.preventDefault();\r\n\t\tsetForm({ ...form, [field]: event?.target?.value });\r\n\t};\r\n\r\n\tconst handleFormSubmit = (event: FormEvent) => {\r\n\t\tevent.preventDefault();\r\n\t\tconst task = { ...form, dateCreated: new Date(), id: generateId(18) } as TaskModel;\r\n\r\n\t\tif (props.onSubmit) {\r\n\t\t\tprops.onSubmit(task);\r\n\t\t}\r\n\t\tif (props.onClose){\r\n\t\t\tprops.onClose();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tclassName=\"flex flex-col\"\r\n\t\t\tonSubmit={handleFormSubmit}\r\n\t\t>\r\n\t\t\t<Input\r\n\t\t\t\tplaceholder=\"Title\"\r\n\t\t\t\tclassName=\"mb-5\"\r\n\t\t\t\tvalue={form.title}\r\n\t\t\t\tonChange={(e) => handleChange(\"title\", e)}\r\n\t\t\t></Input>\r\n\t\t\t<TextArea\r\n\t\t\t\tclassName=\"h-10\"\r\n\t\t\t\tvalue={form.description}\r\n\t\t\t\tonChange={(e) => handleChange(\"description\", e)}\r\n\t\t\t></TextArea>\r\n\t\t\t<div className=\"flex flex-row justify-end\">\r\n\t\t\t\t<Button className=\"mr-2\" onClick={props.onClose}>Cancel</Button>\r\n\t\t\t\t<Button className=\"min-w-1/6\" color=\"primary\" type=\"submit\">\r\n\t\t\t\t\tAdd\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default TaskForm;\r\n","import React, { useContext } from \"react\";\r\nimport { TaskList, TaskRulerList } from \"../Tasks\";\r\nimport { AppContext, TaskModel } from \"../../Data\";\r\nimport moment from \"moment\";\r\n\r\nconst TaskDashboard = () => {\r\n\tconst { state } = useContext(AppContext);\r\n\r\n\tconst getTodo = (): TaskModel[] => {\r\n\t\treturn state.tasks.filter((task) => !task.startedAt);\r\n\t};\r\n\tconst getDoing = (): TaskModel[] => {\r\n\t\treturn state.tasks.filter((task) => task.startedAt && !task.finishedAt);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"flex flex-col justify-center items-center\">\r\n\t\t\t<div className=\"flex self-stretch flex-row justify-center items-center m-4\">\r\n\t\t\t\t<h3 className=\"text-center m-4\">\r\n\t\t\t\t\t{moment().format(\"dddd, DD MMMM YYYY\")}\r\n\t\t\t\t</h3>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"flex self-stretch flex-row\">\r\n\t\t\t\t<TaskList\r\n\t\t\t\t\tclassName=\"flex-1\"\r\n\t\t\t\t\ttitle=\"To Do\"\r\n\t\t\t\t\ttasks={getTodo()}\r\n\t\t\t\t\ttype=\"todo\"\r\n\t\t\t\t></TaskList>\r\n\t\t\t\t<TaskList\r\n\t\t\t\t\tclassName=\"flex-1\"\r\n\t\t\t\t\ttitle=\"Doing\"\r\n\t\t\t\t\ttasks={getDoing()}\r\n\t\t\t\t\ttype=\"doing\"\r\n\t\t\t\t></TaskList>\r\n\t\t\t\t<TaskRulerList\r\n\t\t\t\t\tclassName=\"flex-1\"\r\n\t\t\t\t\ttitle=\"Done\"\r\n\t\t\t\t\ttasks={state.tasks}\r\n\t\t\t\t></TaskRulerList>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TaskDashboard;\r\n","import React from \"react\";\r\nimport { Header } from \".\";\r\nimport TaskDashboard from \"./TaskDashboard\";\r\n\r\nconst Layout = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header></Header>\r\n\t\t\t<div className=\"h-screen bg-gray-100\">\r\n\t\t\t\t<div className=\"container mx-auto\">\r\n\t\t\t\t\t<TaskDashboard></TaskDashboard>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n      <header className=\"flex items-center justify-center flex-wrap bg-primary-600 p-6\" >\r\n        <a className=\"font-bold text-xl text-white\" href=\"https://tasky.it\" target=\"_blank\" rel=\"noreferrer\">\r\n          Tasky!\r\n        </a>\r\n      </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Layout } from \"./Components/Layout\";\nimport { AppDataProvider } from \"./Data\";\n\n\nconst App = () => {\n\treturn (\n\t<AppDataProvider>\n\t\t<Layout></Layout>\n\t</AppDataProvider>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}